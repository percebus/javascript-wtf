<testsuite name="Testem Tests" tests="454" skipped="0" failures="0" timestamp="Wed Jan 01 2025 06:59:23 GMT-0600 (Central Standard Time)" time="8.802"><testcase classname="Chrome 131.0" name="function newCoordinate(...) 180,90 (x, y) =&gt; {longitude:x, latitude:y} unpacking as-is longitude equals 180, from coordinate.longitude" time="0"/><testcase classname="Chrome 131.0" name="function newCoordinate(...) 180,90 (x, y) =&gt; {longitude:x, latitude:y} unpacking as-is latitude equals 90, from coordinate.latitude" time="0"/><testcase classname="Chrome 131.0" name="function newCoordinate(...) 180,90 (x, y) =&gt; {longitude:x, latitude:y} unpacking rename x equals 180, from coordinate.longitude" time="0"/><testcase classname="Chrome 131.0" name="function newCoordinate(...) 180,90 (x, y) =&gt; {longitude:x, latitude:y} unpacking rename y equals 90, from coordinate.latitude" time="0"/><testcase classname="Chrome 131.0" name="function newCoordinate(...) 180,90 (longitude, latitude) =&gt; { longitude, latitude } unpacking as-is longitude equals 180, from coordinate.longitude" time="0"/><testcase classname="Chrome 131.0" name="function newCoordinate(...) 180,90 (longitude, latitude) =&gt; { longitude, latitude } unpacking as-is latitude equals 90, from coordinate.latitude" time="0"/><testcase classname="Chrome 131.0" name="function newCoordinate(...) 180,90 (longitude, latitude) =&gt; { longitude, latitude } unpacking rename x equals 180, from coordinate.longitude" time="0"/><testcase classname="Chrome 131.0" name="function newCoordinate(...) 180,90 (longitude, latitude) =&gt; { longitude, latitude } unpacking rename y equals 90, from coordinate.latitude" time="0"/><testcase classname="Chrome 131.0" name="function newCoordinate(...) 180,90 newCoordinate(coordinate) unpacking as-is longitude equals 180, from coordinate.longitude" time="0"/><testcase classname="Chrome 131.0" name="function newCoordinate(...) 180,90 newCoordinate(coordinate) unpacking as-is latitude equals 90, from coordinate.latitude" time="0"/><testcase classname="Chrome 131.0" name="function newCoordinate(...) 180,90 newCoordinate(coordinate) unpacking rename x equals 180, from coordinate.longitude" time="0"/><testcase classname="Chrome 131.0" name="function newCoordinate(...) 180,90 newCoordinate(coordinate) unpacking rename y equals 90, from coordinate.latitude" time="0"/><testcase classname="Chrome 131.0" name="function newCoordinate(...) 180,90 newCoordinate({latitude:90, longitude:180}) unpacking as-is longitude equals 180, from coordinate.longitude" time="0"/><testcase classname="Chrome 131.0" name="function newCoordinate(...) 180,90 newCoordinate({latitude:90, longitude:180}) unpacking as-is latitude equals 90, from coordinate.latitude" time="0"/><testcase classname="Chrome 131.0" name="function newCoordinate(...) 180,90 newCoordinate({latitude:90, longitude:180}) unpacking rename x equals 180, from coordinate.longitude" time="0"/><testcase classname="Chrome 131.0" name="function newCoordinate(...) 180,90 newCoordinate({latitude:90, longitude:180}) unpacking rename y equals 90, from coordinate.latitude" time="0"/><testcase classname="Chrome 131.0" name="function newCoordinate(...) 180,90 newCoordinate(coordinate = {latitude:90, longitude:180}}) unpacking as-is longitude equals 180, from coordinate.longitude" time="0"/><testcase classname="Chrome 131.0" name="function newCoordinate(...) 180,90 newCoordinate(coordinate = {latitude:90, longitude:180}}) unpacking as-is latitude equals 90, from coordinate.latitude" time="0"/><testcase classname="Chrome 131.0" name="function newCoordinate(...) 180,90 newCoordinate(coordinate = {latitude:90, longitude:180}}) unpacking rename x equals 180, from coordinate.longitude" time="0"/><testcase classname="Chrome 131.0" name="function newCoordinate(...) 180,90 newCoordinate(coordinate = {latitude:90, longitude:180}}) unpacking rename y equals 90, from coordinate.latitude" time="0"/><testcase classname="Chrome 131.0" name="function newCoordinate(...) 180,90 newCoordinate({longitude=0, latitude=0} = {}) unpacking as-is longitude equals 180, from coordinate.longitude" time="0"/><testcase classname="Chrome 131.0" name="function newCoordinate(...) 180,90 newCoordinate({longitude=0, latitude=0} = {}) unpacking as-is latitude equals 90, from coordinate.latitude" time="0"/><testcase classname="Chrome 131.0" name="function newCoordinate(...) 180,90 newCoordinate({longitude=0, latitude=0} = {}) unpacking rename x equals 180, from coordinate.longitude" time="0"/><testcase classname="Chrome 131.0" name="function newCoordinate(...) 180,90 newCoordinate({longitude=0, latitude=0} = {}) unpacking rename y equals 90, from coordinate.latitude" time="0"/><testcase classname="Chrome 131.0" name="function newCoordinate(...) 180,90 newCoordinate({x:180, y:90}) unpacking as-is longitude equals 180, from coordinate.longitude" time="0"/><testcase classname="Chrome 131.0" name="function newCoordinate(...) 180,90 newCoordinate({x:180, y:90}) unpacking as-is latitude equals 90, from coordinate.latitude" time="0"/><testcase classname="Chrome 131.0" name="function newCoordinate(...) 180,90 newCoordinate({x:180, y:90}) unpacking rename x equals 180, from coordinate.longitude" time="0"/><testcase classname="Chrome 131.0" name="function newCoordinate(...) 180,90 newCoordinate({x:180, y:90}) unpacking rename y equals 90, from coordinate.latitude" time="0"/><testcase classname="Chrome 131.0" name="NaN Number isNaN" time="0"/><testcase classname="Chrome 131.0" name="NaN Number is typeof 'number'" time="0"/><testcase classname="Chrome 131.0" name="NaN lodash _.isNaN(NaN) is" time="0"/><testcase classname="Chrome 131.0" name="NaN lodash _.isNumber(NaN) is" time="0"/><testcase classname="Chrome 131.0" name="NaN jasmine .toBeFalsy() is" time="0"/><testcase classname="Chrome 131.0" name="null Object is typeof 'object'" time="0"/><testcase classname="Chrome 131.0" name="null Object is NOT instanceof Object" time="0"/><testcase classname="Chrome 131.0" name="null Number isNaN(null) is NOT" time="0"/><testcase classname="Chrome 131.0" name="null lodash _.isNull(null) is" time="0"/><testcase classname="Chrome 131.0" name="null jasmine .toBeNull() is" time="0"/><testcase classname="Chrome 131.0" name="null jasmine .toBeFalsy() is" time="0"/><testcase classname="Chrome 131.0" name="null jasmine .toEqual(undefined) is NOT!" time="0"/><testcase classname="Chrome 131.0" name="undefined is typeof 'undefined" time="0"/><testcase classname="Chrome 131.0" name="undefined Number isNaN" time="0"/><testcase classname="Chrome 131.0" name="undefined null is not identical to null" time="0"/><testcase classname="Chrome 131.0" name="undefined null equals null" time="0"/><testcase classname="Chrome 131.0" name="undefined lodash _.isUndefined(undefined) is" time="0"/><testcase classname="Chrome 131.0" name="undefined jasmine .toBeFalsy() is" time="0"/><testcase classname="Chrome 131.0" name="undefined jasmine .toEqual(null) is NOT!" time="0"/><testcase classname="Chrome 131.0" name="Number left associativity 1 &lt; 2 &lt; 3 is true" time="0"/><testcase classname="Chrome 131.0" name="Number left associativity 3 &gt; 2 &gt; 1 is false!" time="0"/><testcase classname="Chrome 131.0" name="Number parse null-sy Number(null) returns 0" time="0"/><testcase classname="Chrome 131.0" name="Number parse null-sy Number(undefined) is typeof 'number'" time="0"/><testcase classname="Chrome 131.0" name="Number parse null-sy Number(undefined) isNaN" time="0"/><testcase classname="Chrome 131.0" name="Number parse null-sy Number(undefined) is not 0" time="0"/><testcase classname="Chrome 131.0" name="Number parse objects Number({}) is typeof 'number'" time="0"/><testcase classname="Chrome 131.0" name="Number parse objects Number({}) is NaN" time="0"/><testcase classname="Chrome 131.0" name="Number parse objects Number([]) is typeof 'number'" time="0"/><testcase classname="Chrome 131.0" name="Number parse objects Number([]) is NOT a NaN" time="0"/><testcase classname="Chrome 131.0" name="Number parseInt('bananas') _.isNumber is true" time="0"/><testcase classname="Chrome 131.0" name="Number parseInt('bananas') is typeof 'number'" time="0"/><testcase classname="Chrome 131.0" name="Number parseInt('bananas') NaN is true" time="0"/><testcase classname="Chrome 131.0" name="Number parseInt('bananas') NaN broken reflectiveness bananas == bananas is false" time="0"/><testcase classname="Chrome 131.0" name="Number parseInt('bananas') NaN broken reflectiveness bananas === bananas is false!" time="0"/><testcase classname="Chrome 131.0" name="Number _.parseInt('bananas') _.isNumber is true" time="0"/><testcase classname="Chrome 131.0" name="Number _.parseInt('bananas') is typeof 'number'" time="0"/><testcase classname="Chrome 131.0" name="Number _.parseInt('bananas') NaN is true" time="0"/><testcase classname="Chrome 131.0" name="Number _.parseInt('bananas') NaN broken reflectiveness bananas == bananas is false" time="0"/><testcase classname="Chrome 131.0" name="Number _.parseInt('bananas') NaN broken reflectiveness bananas === bananas is false!" time="0"/><testcase classname="Chrome 131.0" name="Number parse from string whitespace to 0 Number('0') returns 0" time="0"/><testcase classname="Chrome 131.0" name="Number parse from string whitespace to 0 Number('') returns 0" time="0"/><testcase classname="Chrome 131.0" name="Number parse from string whitespace to 0 Number(' ') returns 0" time="0"/><testcase classname="Chrome 131.0" name="Number parse from string whitespace to 0 Number('/r/n/t') returns 0" time="0"/><testcase classname="Chrome 131.0" name="Number parse from string 0 . Number('0.') returns 0" time="0"/><testcase classname="Chrome 131.0" name="Number parse from string 0 . Number('.0') returns 0" time="0"/><testcase classname="Chrome 131.0" name="Number parse from string 0 . Number('.') returns NaN" time="0"/><testcase classname="Chrome 131.0" name="Number parse from string 0 XO Number('0O0') returns 0" time="0"/><testcase classname="Chrome 131.0" name="Number parse from string 0 XO Number('0X0') returns 0" time="0"/><testcase classname="Chrome 131.0" name="Number parse from string -0 Number('-0') is -0" time="0"/><testcase classname="Chrome 131.0" name="Number parse from string -0 Number('-0') does not equal 0" time="0"/><testcase classname="Chrome 131.0" name="Number parse from string -0 JSON.parse('-0) is -0" time="0"/><testcase classname="Chrome 131.0" name="Number parse from string -0 - 0 is -0" time="0"/><testcase classname="Chrome 131.0" name="Number parse from string -0 - 0 Number('- 0') returns NaN" time="0"/><testcase classname="Chrome 131.0" name="Number .toFixed(x) 42.toFixed(2) variable parses" time="0"/><testcase classname="Chrome 131.0" name="Number .toFixed(x) 42.toFixed(2) 42 .toFixed(2) returns '42.00'" time="0"/><testcase classname="Chrome 131.0" name="Number .toFixed(x) 42.toFixed(2) 42.0.toFixed(2) returns '42.00'" time="0"/><testcase classname="Chrome 131.0" name="Number .toFixed(x) 42.toFixed(2) 42..toFixed(2) returns '42.00'" time="0"/><testcase classname="Chrome 131.0" name="Number VALUE MAX is &gt; 0" time="0"/><testcase classname="Chrome 131.0" name="Number VALUE MAX is the biggest possible number" time="0"/><testcase classname="Chrome 131.0" name="Number VALUE MIN is NOT even a negative number" time="0"/><testcase classname="Chrome 131.0" name="Number VALUE MIN is NOT even 0 itself" time="0"/><testcase classname="Chrome 131.0" name="Number VALUE MIN it is actually a positive number" time="0"/><testcase classname="Chrome 131.0" name="Number VALUE MIN is close to 0" time="0"/><testcase classname="Chrome 131.0" name="Number -0 is -0" time="0"/><testcase classname="Chrome 131.0" name="Number -0 equals -0" time="0"/><testcase classname="Chrome 131.0" name="Number -0 does not equal 0" time="0"/><testcase classname="Chrome 131.0" name="Number -0 to string JSON.stringify(-0) returns '0'" time="0"/><testcase classname="Chrome 131.0" name="Number -0 to string String(-0) returns '0'" time="0"/><testcase classname="Chrome 131.0" name="Number -0 to string -0 + '' returns '0'" time="0"/><testcase classname="Chrome 131.0" name="Number -0 to string '' + -0 returns '0'" time="0"/><testcase classname="Chrome 131.0" name="Number -0 to string '' - 0 does NOT return '0'" time="0"/><testcase classname="Chrome 131.0" name="Number -0 to string '' - 0 returns 0, NOT '0'" time="0"/><testcase classname="Chrome 131.0" name="Array [] brackets is typeof 'object', not 'array'" time="0"/><testcase classname="Chrome 131.0" name="Array [] brackets is instanceof Array" time="0"/><testcase classname="Chrome 131.0" name="Array [] brackets is instanceof Object" time="0"/><testcase classname="Chrome 131.0" name="Array [] brackets String([]) returns ''" time="0"/><testcase classname="Chrome 131.0" name="Array [] brackets String([]) is typeof string" time="0"/><testcase classname="Chrome 131.0" name="Array [] brackets lodash _.isObject is" time="0"/><testcase classname="Chrome 131.0" name="Array [] brackets lodash _.isArray is" time="0"/><testcase classname="Chrome 131.0" name="Array [] instance is typeof 'object', not 'array'" time="0"/><testcase classname="Chrome 131.0" name="Array [] instance is instanceof Array" time="0"/><testcase classname="Chrome 131.0" name="Array [] instance is instanceof Object" time="0"/><testcase classname="Chrome 131.0" name="Array [] instance String([]) returns ''" time="0"/><testcase classname="Chrome 131.0" name="Array [] instance String([]) is typeof string" time="0"/><testcase classname="Chrome 131.0" name="Array [] instance lodash _.isObject is" time="0"/><testcase classname="Chrome 131.0" name="Array [] instance lodash _.isArray is" time="0"/><testcase classname="Chrome 131.0" name="Array [1, 2, 3] .map(x =&gt; x * 2) returns [2, 4, 6]" time="0"/><testcase classname="Chrome 131.0" name="Array &lt;3 empty slots&gt; [].length=3 is instanceof Array" time="0"/><testcase classname="Chrome 131.0" name="Array &lt;3 empty slots&gt; [].length=3 is typeof 'object'" time="0"/><testcase classname="Chrome 131.0" name="Array &lt;3 empty slots&gt; [].length=3 lodash _.isArray" time="0"/><testcase classname="Chrome 131.0" name="Array &lt;3 empty slots&gt; [].length=3 has length 3" time="0"/><testcase classname="Chrome 131.0" name="Array &lt;3 empty slots&gt; [].length=3 equals [undefined, undefined, undefined]" time="0"/><testcase classname="Chrome 131.0" name="Array &lt;3 empty slots&gt; [].length=3 .toString() equals ',,'" time="0"/><testcase classname="Chrome 131.0" name="Array &lt;3 empty slots&gt; [].length=3 .toString() does NOT equal '[undefined, undefined, undefined]'" time="0"/><testcase classname="Chrome 131.0" name="Array &lt;3 empty slots&gt; [].length=3 .map(x =&gt; 'slot') empty slots does NOT equal 'slot;slot;slot'" time="0"/><testcase classname="Chrome 131.0" name="Array &lt;3 empty slots&gt; [].length=3 .map(x =&gt; 'slot') empty slots actually equals ';;'" time="0"/><testcase classname="Chrome 131.0" name="Array &lt;3 empty slots&gt; [,,,] is instanceof Array" time="0"/><testcase classname="Chrome 131.0" name="Array &lt;3 empty slots&gt; [,,,] is typeof 'object'" time="0"/><testcase classname="Chrome 131.0" name="Array &lt;3 empty slots&gt; [,,,] lodash _.isArray" time="0"/><testcase classname="Chrome 131.0" name="Array &lt;3 empty slots&gt; [,,,] has length 3" time="0"/><testcase classname="Chrome 131.0" name="Array &lt;3 empty slots&gt; [,,,] equals [undefined, undefined, undefined]" time="0"/><testcase classname="Chrome 131.0" name="Array &lt;3 empty slots&gt; [,,,] .toString() equals ',,'" time="0"/><testcase classname="Chrome 131.0" name="Array &lt;3 empty slots&gt; [,,,] .toString() does NOT equal '[undefined, undefined, undefined]'" time="0"/><testcase classname="Chrome 131.0" name="Array &lt;3 empty slots&gt; [,,,] .map(x =&gt; 'slot') empty slots does NOT equal 'slot;slot;slot'" time="0"/><testcase classname="Chrome 131.0" name="Array &lt;3 empty slots&gt; [,,,] .map(x =&gt; 'slot') empty slots actually equals ';;'" time="0"/><testcase classname="Chrome 131.0" name="Array &lt;3 empty slots&gt; [ undefined x 3 ] is instanceof Array" time="0"/><testcase classname="Chrome 131.0" name="Array &lt;3 empty slots&gt; [ undefined x 3 ] is typeof 'object'" time="0"/><testcase classname="Chrome 131.0" name="Array &lt;3 empty slots&gt; [ undefined x 3 ] lodash _.isArray" time="0"/><testcase classname="Chrome 131.0" name="Array &lt;3 empty slots&gt; [ undefined x 3 ] has length 3" time="0"/><testcase classname="Chrome 131.0" name="Array &lt;3 empty slots&gt; [ undefined x 3 ] equals [undefined, undefined, undefined]" time="0"/><testcase classname="Chrome 131.0" name="Array &lt;3 empty slots&gt; [ undefined x 3 ] .toString() equals ',,'" time="0"/><testcase classname="Chrome 131.0" name="Array &lt;3 empty slots&gt; [ undefined x 3 ] .toString() does NOT equal '[undefined, undefined, undefined]'" time="0"/><testcase classname="Chrome 131.0" name="Array &lt;3 empty slots&gt; [ undefined x 3 ] .map(x =&gt; 'slot') [ undefined x 3 ] equals 'slot;slot;slot'" time="0"/><testcase classname="Chrome 131.0" name="Array &lt;3 empty slots&gt; Array(3) is instanceof Array" time="0"/><testcase classname="Chrome 131.0" name="Array &lt;3 empty slots&gt; Array(3) is typeof 'object'" time="0"/><testcase classname="Chrome 131.0" name="Array &lt;3 empty slots&gt; Array(3) lodash _.isArray" time="0"/><testcase classname="Chrome 131.0" name="Array &lt;3 empty slots&gt; Array(3) has length 3" time="0"/><testcase classname="Chrome 131.0" name="Array &lt;3 empty slots&gt; Array(3) equals [undefined, undefined, undefined]" time="0"/><testcase classname="Chrome 131.0" name="Array &lt;3 empty slots&gt; Array(3) .toString() equals ',,'" time="0"/><testcase classname="Chrome 131.0" name="Array &lt;3 empty slots&gt; Array(3) .toString() does NOT equal '[undefined, undefined, undefined]'" time="0"/><testcase classname="Chrome 131.0" name="Array &lt;3 empty slots&gt; Array(3) .map(x =&gt; 'slot') empty slots does NOT equal 'slot;slot;slot'" time="0"/><testcase classname="Chrome 131.0" name="Array &lt;3 empty slots&gt; Array(3) .map(x =&gt; 'slot') empty slots actually equals ';;'" time="0"/><testcase classname="Chrome 131.0" name="Array &lt;3 empty slots&gt; new Array(3) is instanceof Array" time="0"/><testcase classname="Chrome 131.0" name="Array &lt;3 empty slots&gt; new Array(3) is typeof 'object'" time="0"/><testcase classname="Chrome 131.0" name="Array &lt;3 empty slots&gt; new Array(3) lodash _.isArray" time="0"/><testcase classname="Chrome 131.0" name="Array &lt;3 empty slots&gt; new Array(3) has length 3" time="0"/><testcase classname="Chrome 131.0" name="Array &lt;3 empty slots&gt; new Array(3) equals [undefined, undefined, undefined]" time="0"/><testcase classname="Chrome 131.0" name="Array &lt;3 empty slots&gt; new Array(3) .toString() equals ',,'" time="0"/><testcase classname="Chrome 131.0" name="Array &lt;3 empty slots&gt; new Array(3) .toString() does NOT equal '[undefined, undefined, undefined]'" time="0"/><testcase classname="Chrome 131.0" name="Array &lt;3 empty slots&gt; new Array(3) .map(x =&gt; 'slot') empty slots does NOT equal 'slot;slot;slot'" time="0"/><testcase classname="Chrome 131.0" name="Array &lt;3 empty slots&gt; new Array(3) .map(x =&gt; 'slot') empty slots actually equals ';;'" time="0"/><testcase classname="Chrome 131.0" name="Object coercion [] !== [] is true" time="0"/><testcase classname="Chrome 131.0" name="Object coercion [] + {} equals '[object Object]'" time="0"/><testcase classname="Chrome 131.0" name="Object coercion {} + [] is 0" time="0"/><testcase classname="Chrome 131.0" name="Object coercion {} + [] equals '[object Object]'" time="0"/><testcase classname="Chrome 131.0" name="Object {} is typeof object" time="0"/><testcase classname="Chrome 131.0" name="Object {} is instanceof Object" time="0"/><testcase classname="Chrome 131.0" name="Object {} String({}) returns '[object Object]' string" time="0"/><testcase classname="Chrome 131.0" name="Object {} String({}) is typeof string" time="0"/><testcase classname="Chrome 131.0" name="Object {} lodash _.isObject is" time="0"/><testcase classname="Chrome 131.0" name="Object {} lodash _.isArray is not" time="0"/><testcase classname="Chrome 131.0" name="Object {} is typeof object" time="0"/><testcase classname="Chrome 131.0" name="Object {} is instanceof Object" time="0"/><testcase classname="Chrome 131.0" name="Object {} String({}) returns '[object Object]' string" time="0"/><testcase classname="Chrome 131.0" name="Object {} String({}) is typeof string" time="0"/><testcase classname="Chrome 131.0" name="Object {} lodash _.isObject is" time="0"/><testcase classname="Chrome 131.0" name="Object {} lodash _.isArray is not" time="0"/><testcase classname="Chrome 131.0" name="lodash it is available" time="0"/><testcase classname="Chrome 131.0" name="String parse nothing String(undefined) returns 'undefined'" time="0"/><testcase classname="Chrome 131.0" name="String parse nothing String(undefined) is typeof string" time="0"/><testcase classname="Chrome 131.0" name="String parse nothing String(null) returns 'undefined'" time="0"/><testcase classname="Chrome 131.0" name="String parse nothing String(null) is typeof string" time="0"/><testcase classname="Chrome 131.0" name="String parse Object String({}) String({}) returns '[object Object]' string" time="0"/><testcase classname="Chrome 131.0" name="String parse Object String({}) String({}) is typeof string" time="0"/><testcase classname="Chrome 131.0" name="String parse Object String({}) {} + '' returns '[object Object]' string" time="0"/><testcase classname="Chrome 131.0" name="String parse Object String({}) {} + '' is typeof string" time="0"/><testcase classname="Chrome 131.0" name="String parse Object String({}) '' + {} returns '[object Object]' string" time="0"/><testcase classname="Chrome 131.0" name="String parse Object String({}) '' + {} is typeof string" time="0"/><testcase classname="Chrome 131.0" name="String parse Object Array String([]) String([]) returns ''" time="0"/><testcase classname="Chrome 131.0" name="String parse Object Array String([]) String([]) is typeof string" time="0"/><testcase classname="Chrome 131.0" name="String parse Object Array String([]) String([undefined]) returns ''" time="0"/><testcase classname="Chrome 131.0" name="String parse Object Array String([]) String([undefined]) is typeof string" time="0"/><testcase classname="Chrome 131.0" name="String parse Object Array String([]) String([null]) returns ''" time="0"/><testcase classname="Chrome 131.0" name="String parse Object Array String([]) String([null]) is typeof string" time="0"/><testcase classname="Chrome 131.0" name="String parse Object Array String([]) [] + '' returns ''" time="0"/><testcase classname="Chrome 131.0" name="String parse Object Array String([]) [] + '' is typeof string" time="0"/><testcase classname="Chrome 131.0" name="String parse Object Array String([]) '' + [] returns ''" time="0"/><testcase classname="Chrome 131.0" name="String parse Object Array String([]) '' + [] is typeof string" time="0"/><testcase classname="Chrome 131.0" name="String parse Object Array new String([]) new String([]) is typeof 'object', not 'string'" time="0"/><testcase classname="Chrome 131.0" name="String parse Object Array new String([]) new String([]) is instanceof String" time="0"/><testcase classname="Chrome 131.0" name="String parse Object Array new String([]) new String([]) is instanceof Object" time="0"/><testcase classname="Chrome 131.0" name="String parse Object Array new String([]) new String([]) .toString() returns ''" time="0"/><testcase classname="Chrome 131.0" name="String parse Object Array new String([]) new String([undefined]) is typeof 'object', not 'string'" time="0"/><testcase classname="Chrome 131.0" name="String parse Object Array new String([]) new String([undefined]) is instanceof String" time="0"/><testcase classname="Chrome 131.0" name="String parse Object Array new String([]) new String([undefined]) is instanceof Object" time="0"/><testcase classname="Chrome 131.0" name="String parse Object Array new String([]) new String([undefined]) .toString() returns ''" time="0"/><testcase classname="Chrome 131.0" name="String parse Object Array new String([]) new String([null]) is typeof 'object', not 'string'" time="0"/><testcase classname="Chrome 131.0" name="String parse Object Array new String([]) new String([null]) is instanceof String" time="0"/><testcase classname="Chrome 131.0" name="String parse Object Array new String([]) new String([null]) is instanceof Object" time="0"/><testcase classname="Chrome 131.0" name="String parse Object Array new String([]) new String([null]) .toString() returns ''" time="0"/><testcase classname="Chrome 131.0" name="String parse Object Array String([,,]) String([,,]) returns ','" time="0"/><testcase classname="Chrome 131.0" name="String parse Object Array String([,,]) String([,,]) is typeof string" time="0"/><testcase classname="Chrome 131.0" name="String parse Object Array String([,,]) String([undefined,undefined,]) returns ','" time="0"/><testcase classname="Chrome 131.0" name="String parse Object Array String([,,]) String([undefined,undefined,]) is typeof string" time="0"/><testcase classname="Chrome 131.0" name="String parse Object Array String([,,]) String([null,null,]) returns ','" time="0"/><testcase classname="Chrome 131.0" name="String parse Object Array String([,,]) String([null,null,]) is typeof string" time="0"/><testcase classname="Chrome 131.0" name="switch case order magicNumber 10 returns 2" time="0"/><testcase classname="Chrome 131.0" name="switch case order magicNumber 20 returns 2" time="0"/><testcase classname="Chrome 131.0" name="switch case order magicNumber 30 returns 4" time="0"/><testcase classname="Chrome 131.0" name="switch case order magicNumber 42 returns 3" time="0"/><testcase classname="Chrome 131.0" name="Symbol to string Symbol('that is cool') convert String(oSymbol) can be converted Symbol('that is cool')" time="0"/><testcase classname="Chrome 131.0" name="Symbol to string Symbol('that is cool') convert oSymbol.toString() can be converted Symbol('that is cool')" time="0"/><testcase classname="Chrome 131.0" name="Symbol to string Symbol('that is cool') cast oSymbol + '' throws a TypeError" time="0"/><testcase classname="Chrome 131.0" name="Symbol to string Symbol('that is cool') cast oSymbol + '' error message Common throws a TypeError: message" time="0"/><testcase classname="Chrome 131.0" name="Symbol to string Symbol('that is cool') cast oSymbol + '' error message Safari throws a TypeError: message" time="0"/><testcase classname="Chrome 131.0" name="Symbol to string Symbol('that is cool') cast '' + oSymbol throws a TypeError" time="0"/><testcase classname="Chrome 131.0" name="Symbol to string Symbol('that is cool') cast '' + oSymbol error message Common throws a TypeError: message" time="0"/><testcase classname="Chrome 131.0" name="Symbol to string Symbol('that is cool') cast '' + oSymbol error message Safari throws a TypeError: message" time="0"/><testcase classname="Chrome 131.0" name="try { something } finally { return x } always runs last" time="0"/><testcase classname="Firefox 133.0" name="function newCoordinate(...) 180,90 (x, y) =&gt; {longitude:x, latitude:y} unpacking as-is longitude equals 180, from coordinate.longitude" time="0"/><testcase classname="Firefox 133.0" name="function newCoordinate(...) 180,90 (x, y) =&gt; {longitude:x, latitude:y} unpacking as-is latitude equals 90, from coordinate.latitude" time="0"/><testcase classname="Firefox 133.0" name="function newCoordinate(...) 180,90 (x, y) =&gt; {longitude:x, latitude:y} unpacking rename x equals 180, from coordinate.longitude" time="0"/><testcase classname="Firefox 133.0" name="function newCoordinate(...) 180,90 (x, y) =&gt; {longitude:x, latitude:y} unpacking rename y equals 90, from coordinate.latitude" time="0"/><testcase classname="Firefox 133.0" name="function newCoordinate(...) 180,90 (longitude, latitude) =&gt; { longitude, latitude } unpacking as-is longitude equals 180, from coordinate.longitude" time="0"/><testcase classname="Firefox 133.0" name="function newCoordinate(...) 180,90 (longitude, latitude) =&gt; { longitude, latitude } unpacking as-is latitude equals 90, from coordinate.latitude" time="0"/><testcase classname="Firefox 133.0" name="function newCoordinate(...) 180,90 (longitude, latitude) =&gt; { longitude, latitude } unpacking rename x equals 180, from coordinate.longitude" time="0"/><testcase classname="Firefox 133.0" name="function newCoordinate(...) 180,90 (longitude, latitude) =&gt; { longitude, latitude } unpacking rename y equals 90, from coordinate.latitude" time="0"/><testcase classname="Firefox 133.0" name="function newCoordinate(...) 180,90 newCoordinate(coordinate) unpacking as-is longitude equals 180, from coordinate.longitude" time="0"/><testcase classname="Firefox 133.0" name="function newCoordinate(...) 180,90 newCoordinate(coordinate) unpacking as-is latitude equals 90, from coordinate.latitude" time="0"/><testcase classname="Firefox 133.0" name="function newCoordinate(...) 180,90 newCoordinate(coordinate) unpacking rename x equals 180, from coordinate.longitude" time="0"/><testcase classname="Firefox 133.0" name="function newCoordinate(...) 180,90 newCoordinate(coordinate) unpacking rename y equals 90, from coordinate.latitude" time="0"/><testcase classname="Firefox 133.0" name="function newCoordinate(...) 180,90 newCoordinate({latitude:90, longitude:180}) unpacking as-is longitude equals 180, from coordinate.longitude" time="0"/><testcase classname="Firefox 133.0" name="function newCoordinate(...) 180,90 newCoordinate({latitude:90, longitude:180}) unpacking as-is latitude equals 90, from coordinate.latitude" time="0"/><testcase classname="Firefox 133.0" name="function newCoordinate(...) 180,90 newCoordinate({latitude:90, longitude:180}) unpacking rename x equals 180, from coordinate.longitude" time="0"/><testcase classname="Firefox 133.0" name="function newCoordinate(...) 180,90 newCoordinate({latitude:90, longitude:180}) unpacking rename y equals 90, from coordinate.latitude" time="0"/><testcase classname="Firefox 133.0" name="function newCoordinate(...) 180,90 newCoordinate(coordinate = {latitude:90, longitude:180}}) unpacking as-is longitude equals 180, from coordinate.longitude" time="0"/><testcase classname="Firefox 133.0" name="function newCoordinate(...) 180,90 newCoordinate(coordinate = {latitude:90, longitude:180}}) unpacking as-is latitude equals 90, from coordinate.latitude" time="0"/><testcase classname="Firefox 133.0" name="function newCoordinate(...) 180,90 newCoordinate(coordinate = {latitude:90, longitude:180}}) unpacking rename x equals 180, from coordinate.longitude" time="0"/><testcase classname="Firefox 133.0" name="function newCoordinate(...) 180,90 newCoordinate(coordinate = {latitude:90, longitude:180}}) unpacking rename y equals 90, from coordinate.latitude" time="0"/><testcase classname="Firefox 133.0" name="function newCoordinate(...) 180,90 newCoordinate({longitude=0, latitude=0} = {}) unpacking as-is longitude equals 180, from coordinate.longitude" time="0"/><testcase classname="Firefox 133.0" name="function newCoordinate(...) 180,90 newCoordinate({longitude=0, latitude=0} = {}) unpacking as-is latitude equals 90, from coordinate.latitude" time="0"/><testcase classname="Firefox 133.0" name="function newCoordinate(...) 180,90 newCoordinate({longitude=0, latitude=0} = {}) unpacking rename x equals 180, from coordinate.longitude" time="0"/><testcase classname="Firefox 133.0" name="function newCoordinate(...) 180,90 newCoordinate({longitude=0, latitude=0} = {}) unpacking rename y equals 90, from coordinate.latitude" time="0"/><testcase classname="Firefox 133.0" name="function newCoordinate(...) 180,90 newCoordinate({x:180, y:90}) unpacking as-is longitude equals 180, from coordinate.longitude" time="0"/><testcase classname="Firefox 133.0" name="function newCoordinate(...) 180,90 newCoordinate({x:180, y:90}) unpacking as-is latitude equals 90, from coordinate.latitude" time="0"/><testcase classname="Firefox 133.0" name="function newCoordinate(...) 180,90 newCoordinate({x:180, y:90}) unpacking rename x equals 180, from coordinate.longitude" time="0"/><testcase classname="Firefox 133.0" name="function newCoordinate(...) 180,90 newCoordinate({x:180, y:90}) unpacking rename y equals 90, from coordinate.latitude" time="0"/><testcase classname="Firefox 133.0" name="NaN Number isNaN" time="0"/><testcase classname="Firefox 133.0" name="NaN Number is typeof 'number'" time="0"/><testcase classname="Firefox 133.0" name="NaN lodash _.isNaN(NaN) is" time="0"/><testcase classname="Firefox 133.0" name="NaN lodash _.isNumber(NaN) is" time="0"/><testcase classname="Firefox 133.0" name="NaN jasmine .toBeFalsy() is" time="0"/><testcase classname="Firefox 133.0" name="null Object is typeof 'object'" time="0"/><testcase classname="Firefox 133.0" name="null Object is NOT instanceof Object" time="0"/><testcase classname="Firefox 133.0" name="null Number isNaN(null) is NOT" time="0"/><testcase classname="Firefox 133.0" name="null lodash _.isNull(null) is" time="0"/><testcase classname="Firefox 133.0" name="null jasmine .toBeNull() is" time="0"/><testcase classname="Firefox 133.0" name="null jasmine .toBeFalsy() is" time="0"/><testcase classname="Firefox 133.0" name="null jasmine .toEqual(undefined) is NOT!" time="0"/><testcase classname="Firefox 133.0" name="undefined is typeof 'undefined" time="0"/><testcase classname="Firefox 133.0" name="undefined Number isNaN" time="0"/><testcase classname="Firefox 133.0" name="undefined null is not identical to null" time="0"/><testcase classname="Firefox 133.0" name="undefined null equals null" time="0"/><testcase classname="Firefox 133.0" name="undefined lodash _.isUndefined(undefined) is" time="0"/><testcase classname="Firefox 133.0" name="undefined jasmine .toBeFalsy() is" time="0"/><testcase classname="Firefox 133.0" name="undefined jasmine .toEqual(null) is NOT!" time="0"/><testcase classname="Firefox 133.0" name="Number left associativity 1 &lt; 2 &lt; 3 is true" time="0"/><testcase classname="Firefox 133.0" name="Number left associativity 3 &gt; 2 &gt; 1 is false!" time="0"/><testcase classname="Firefox 133.0" name="Number parse null-sy Number(null) returns 0" time="0"/><testcase classname="Firefox 133.0" name="Number parse null-sy Number(undefined) is typeof 'number'" time="0"/><testcase classname="Firefox 133.0" name="Number parse null-sy Number(undefined) isNaN" time="0"/><testcase classname="Firefox 133.0" name="Number parse null-sy Number(undefined) is not 0" time="0"/><testcase classname="Firefox 133.0" name="Number parse objects Number({}) is typeof 'number'" time="0"/><testcase classname="Firefox 133.0" name="Number parse objects Number({}) is NaN" time="0"/><testcase classname="Firefox 133.0" name="Number parse objects Number([]) is typeof 'number'" time="0"/><testcase classname="Firefox 133.0" name="Number parse objects Number([]) is NOT a NaN" time="0"/><testcase classname="Firefox 133.0" name="Number parseInt('bananas') _.isNumber is true" time="0"/><testcase classname="Firefox 133.0" name="Number parseInt('bananas') is typeof 'number'" time="0"/><testcase classname="Firefox 133.0" name="Number parseInt('bananas') NaN is true" time="0"/><testcase classname="Firefox 133.0" name="Number parseInt('bananas') NaN broken reflectiveness bananas == bananas is false" time="0"/><testcase classname="Firefox 133.0" name="Number parseInt('bananas') NaN broken reflectiveness bananas === bananas is false!" time="0"/><testcase classname="Firefox 133.0" name="Number _.parseInt('bananas') _.isNumber is true" time="0"/><testcase classname="Firefox 133.0" name="Number _.parseInt('bananas') is typeof 'number'" time="0"/><testcase classname="Firefox 133.0" name="Number _.parseInt('bananas') NaN is true" time="0"/><testcase classname="Firefox 133.0" name="Number _.parseInt('bananas') NaN broken reflectiveness bananas == bananas is false" time="0"/><testcase classname="Firefox 133.0" name="Number _.parseInt('bananas') NaN broken reflectiveness bananas === bananas is false!" time="0"/><testcase classname="Firefox 133.0" name="Number parse from string whitespace to 0 Number('0') returns 0" time="0"/><testcase classname="Firefox 133.0" name="Number parse from string whitespace to 0 Number('') returns 0" time="0"/><testcase classname="Firefox 133.0" name="Number parse from string whitespace to 0 Number(' ') returns 0" time="0"/><testcase classname="Firefox 133.0" name="Number parse from string whitespace to 0 Number('/r/n/t') returns 0" time="0"/><testcase classname="Firefox 133.0" name="Number parse from string 0 . Number('0.') returns 0" time="0"/><testcase classname="Firefox 133.0" name="Number parse from string 0 . Number('.0') returns 0" time="0"/><testcase classname="Firefox 133.0" name="Number parse from string 0 . Number('.') returns NaN" time="0"/><testcase classname="Firefox 133.0" name="Number parse from string 0 XO Number('0O0') returns 0" time="0"/><testcase classname="Firefox 133.0" name="Number parse from string 0 XO Number('0X0') returns 0" time="0"/><testcase classname="Firefox 133.0" name="Number parse from string -0 Number('-0') is -0" time="0"/><testcase classname="Firefox 133.0" name="Number parse from string -0 Number('-0') does not equal 0" time="0"/><testcase classname="Firefox 133.0" name="Number parse from string -0 JSON.parse('-0) is -0" time="0"/><testcase classname="Firefox 133.0" name="Number parse from string -0 - 0 is -0" time="0"/><testcase classname="Firefox 133.0" name="Number parse from string -0 - 0 Number('- 0') returns NaN" time="0"/><testcase classname="Firefox 133.0" name="Number .toFixed(x) 42.toFixed(2) variable parses" time="0"/><testcase classname="Firefox 133.0" name="Number .toFixed(x) 42.toFixed(2) 42 .toFixed(2) returns '42.00'" time="0"/><testcase classname="Firefox 133.0" name="Number .toFixed(x) 42.toFixed(2) 42.0.toFixed(2) returns '42.00'" time="0"/><testcase classname="Firefox 133.0" name="Number .toFixed(x) 42.toFixed(2) 42..toFixed(2) returns '42.00'" time="0"/><testcase classname="Firefox 133.0" name="Number VALUE MAX is &gt; 0" time="0"/><testcase classname="Firefox 133.0" name="Number VALUE MAX is the biggest possible number" time="0"/><testcase classname="Firefox 133.0" name="Number VALUE MIN is NOT even a negative number" time="0"/><testcase classname="Firefox 133.0" name="Number VALUE MIN is NOT even 0 itself" time="0"/><testcase classname="Firefox 133.0" name="Number VALUE MIN it is actually a positive number" time="0"/><testcase classname="Firefox 133.0" name="Number VALUE MIN is close to 0" time="0"/><testcase classname="Firefox 133.0" name="Number -0 is -0" time="0"/><testcase classname="Firefox 133.0" name="Number -0 equals -0" time="0"/><testcase classname="Firefox 133.0" name="Number -0 does not equal 0" time="0"/><testcase classname="Firefox 133.0" name="Number -0 to string JSON.stringify(-0) returns '0'" time="0"/><testcase classname="Firefox 133.0" name="Number -0 to string String(-0) returns '0'" time="0"/><testcase classname="Firefox 133.0" name="Number -0 to string -0 + '' returns '0'" time="0"/><testcase classname="Firefox 133.0" name="Number -0 to string '' + -0 returns '0'" time="0"/><testcase classname="Firefox 133.0" name="Number -0 to string '' - 0 does NOT return '0'" time="0"/><testcase classname="Firefox 133.0" name="Number -0 to string '' - 0 returns 0, NOT '0'" time="0"/><testcase classname="Firefox 133.0" name="Array [] brackets is typeof 'object', not 'array'" time="0"/><testcase classname="Firefox 133.0" name="Array [] brackets is instanceof Array" time="0"/><testcase classname="Firefox 133.0" name="Array [] brackets is instanceof Object" time="0"/><testcase classname="Firefox 133.0" name="Array [] brackets String([]) returns ''" time="0"/><testcase classname="Firefox 133.0" name="Array [] brackets String([]) is typeof string" time="0"/><testcase classname="Firefox 133.0" name="Array [] brackets lodash _.isObject is" time="0"/><testcase classname="Firefox 133.0" name="Array [] brackets lodash _.isArray is" time="0"/><testcase classname="Firefox 133.0" name="Array [] instance is typeof 'object', not 'array'" time="0"/><testcase classname="Firefox 133.0" name="Array [] instance is instanceof Array" time="0"/><testcase classname="Firefox 133.0" name="Array [] instance is instanceof Object" time="0"/><testcase classname="Firefox 133.0" name="Array [] instance String([]) returns ''" time="0"/><testcase classname="Firefox 133.0" name="Array [] instance String([]) is typeof string" time="0"/><testcase classname="Firefox 133.0" name="Array [] instance lodash _.isObject is" time="0"/><testcase classname="Firefox 133.0" name="Array [] instance lodash _.isArray is" time="0"/><testcase classname="Firefox 133.0" name="Array [1, 2, 3] .map(x =&gt; x * 2) returns [2, 4, 6]" time="0"/><testcase classname="Firefox 133.0" name="Array &lt;3 empty slots&gt; [].length=3 is instanceof Array" time="0"/><testcase classname="Firefox 133.0" name="Array &lt;3 empty slots&gt; [].length=3 is typeof 'object'" time="0"/><testcase classname="Firefox 133.0" name="Array &lt;3 empty slots&gt; [].length=3 lodash _.isArray" time="0"/><testcase classname="Firefox 133.0" name="Array &lt;3 empty slots&gt; [].length=3 has length 3" time="0"/><testcase classname="Firefox 133.0" name="Array &lt;3 empty slots&gt; [].length=3 equals [undefined, undefined, undefined]" time="0"/><testcase classname="Firefox 133.0" name="Array &lt;3 empty slots&gt; [].length=3 .toString() equals ',,'" time="0"/><testcase classname="Firefox 133.0" name="Array &lt;3 empty slots&gt; [].length=3 .toString() does NOT equal '[undefined, undefined, undefined]'" time="0"/><testcase classname="Firefox 133.0" name="Array &lt;3 empty slots&gt; [].length=3 .map(x =&gt; 'slot') empty slots does NOT equal 'slot;slot;slot'" time="0"/><testcase classname="Firefox 133.0" name="Array &lt;3 empty slots&gt; [].length=3 .map(x =&gt; 'slot') empty slots actually equals ';;'" time="0"/><testcase classname="Firefox 133.0" name="Array &lt;3 empty slots&gt; [,,,] is instanceof Array" time="0"/><testcase classname="Firefox 133.0" name="Array &lt;3 empty slots&gt; [,,,] is typeof 'object'" time="0"/><testcase classname="Firefox 133.0" name="Array &lt;3 empty slots&gt; [,,,] lodash _.isArray" time="0"/><testcase classname="Firefox 133.0" name="Array &lt;3 empty slots&gt; [,,,] has length 3" time="0"/><testcase classname="Firefox 133.0" name="Array &lt;3 empty slots&gt; [,,,] equals [undefined, undefined, undefined]" time="0"/><testcase classname="Firefox 133.0" name="Array &lt;3 empty slots&gt; [,,,] .toString() equals ',,'" time="0"/><testcase classname="Firefox 133.0" name="Array &lt;3 empty slots&gt; [,,,] .toString() does NOT equal '[undefined, undefined, undefined]'" time="0"/><testcase classname="Firefox 133.0" name="Array &lt;3 empty slots&gt; [,,,] .map(x =&gt; 'slot') empty slots does NOT equal 'slot;slot;slot'" time="0"/><testcase classname="Firefox 133.0" name="Array &lt;3 empty slots&gt; [,,,] .map(x =&gt; 'slot') empty slots actually equals ';;'" time="0"/><testcase classname="Firefox 133.0" name="Array &lt;3 empty slots&gt; [ undefined x 3 ] is instanceof Array" time="0"/><testcase classname="Firefox 133.0" name="Array &lt;3 empty slots&gt; [ undefined x 3 ] is typeof 'object'" time="0"/><testcase classname="Firefox 133.0" name="Array &lt;3 empty slots&gt; [ undefined x 3 ] lodash _.isArray" time="0"/><testcase classname="Firefox 133.0" name="Array &lt;3 empty slots&gt; [ undefined x 3 ] has length 3" time="0"/><testcase classname="Firefox 133.0" name="Array &lt;3 empty slots&gt; [ undefined x 3 ] equals [undefined, undefined, undefined]" time="0"/><testcase classname="Firefox 133.0" name="Array &lt;3 empty slots&gt; [ undefined x 3 ] .toString() equals ',,'" time="0"/><testcase classname="Firefox 133.0" name="Array &lt;3 empty slots&gt; [ undefined x 3 ] .toString() does NOT equal '[undefined, undefined, undefined]'" time="0"/><testcase classname="Firefox 133.0" name="Array &lt;3 empty slots&gt; [ undefined x 3 ] .map(x =&gt; 'slot') [ undefined x 3 ] equals 'slot;slot;slot'" time="0"/><testcase classname="Firefox 133.0" name="Array &lt;3 empty slots&gt; Array(3) is instanceof Array" time="0"/><testcase classname="Firefox 133.0" name="Array &lt;3 empty slots&gt; Array(3) is typeof 'object'" time="0"/><testcase classname="Firefox 133.0" name="Array &lt;3 empty slots&gt; Array(3) lodash _.isArray" time="0"/><testcase classname="Firefox 133.0" name="Array &lt;3 empty slots&gt; Array(3) has length 3" time="0"/><testcase classname="Firefox 133.0" name="Array &lt;3 empty slots&gt; Array(3) equals [undefined, undefined, undefined]" time="0"/><testcase classname="Firefox 133.0" name="Array &lt;3 empty slots&gt; Array(3) .toString() equals ',,'" time="0"/><testcase classname="Firefox 133.0" name="Array &lt;3 empty slots&gt; Array(3) .toString() does NOT equal '[undefined, undefined, undefined]'" time="0"/><testcase classname="Firefox 133.0" name="Array &lt;3 empty slots&gt; Array(3) .map(x =&gt; 'slot') empty slots does NOT equal 'slot;slot;slot'" time="0"/><testcase classname="Firefox 133.0" name="Array &lt;3 empty slots&gt; Array(3) .map(x =&gt; 'slot') empty slots actually equals ';;'" time="0"/><testcase classname="Firefox 133.0" name="Array &lt;3 empty slots&gt; new Array(3) is instanceof Array" time="0"/><testcase classname="Firefox 133.0" name="Array &lt;3 empty slots&gt; new Array(3) is typeof 'object'" time="0"/><testcase classname="Firefox 133.0" name="Array &lt;3 empty slots&gt; new Array(3) lodash _.isArray" time="0"/><testcase classname="Firefox 133.0" name="Array &lt;3 empty slots&gt; new Array(3) has length 3" time="0"/><testcase classname="Firefox 133.0" name="Array &lt;3 empty slots&gt; new Array(3) equals [undefined, undefined, undefined]" time="0"/><testcase classname="Firefox 133.0" name="Array &lt;3 empty slots&gt; new Array(3) .toString() equals ',,'" time="0"/><testcase classname="Firefox 133.0" name="Array &lt;3 empty slots&gt; new Array(3) .toString() does NOT equal '[undefined, undefined, undefined]'" time="0"/><testcase classname="Firefox 133.0" name="Array &lt;3 empty slots&gt; new Array(3) .map(x =&gt; 'slot') empty slots does NOT equal 'slot;slot;slot'" time="0"/><testcase classname="Firefox 133.0" name="Array &lt;3 empty slots&gt; new Array(3) .map(x =&gt; 'slot') empty slots actually equals ';;'" time="0"/><testcase classname="Firefox 133.0" name="Object coercion [] !== [] is true" time="0"/><testcase classname="Firefox 133.0" name="Object coercion [] + {} equals '[object Object]'" time="0"/><testcase classname="Firefox 133.0" name="Object coercion {} + [] is 0" time="0"/><testcase classname="Firefox 133.0" name="Object coercion {} + [] equals '[object Object]'" time="0"/><testcase classname="Firefox 133.0" name="Object {} is typeof object" time="0"/><testcase classname="Firefox 133.0" name="Object {} is instanceof Object" time="0"/><testcase classname="Firefox 133.0" name="Object {} String({}) returns '[object Object]' string" time="0"/><testcase classname="Firefox 133.0" name="Object {} String({}) is typeof string" time="0"/><testcase classname="Firefox 133.0" name="Object {} lodash _.isObject is" time="0"/><testcase classname="Firefox 133.0" name="Object {} lodash _.isArray is not" time="0"/><testcase classname="Firefox 133.0" name="Object {} is typeof object" time="0"/><testcase classname="Firefox 133.0" name="Object {} is instanceof Object" time="0"/><testcase classname="Firefox 133.0" name="Object {} String({}) returns '[object Object]' string" time="0"/><testcase classname="Firefox 133.0" name="Object {} String({}) is typeof string" time="0"/><testcase classname="Firefox 133.0" name="Object {} lodash _.isObject is" time="0"/><testcase classname="Firefox 133.0" name="Object {} lodash _.isArray is not" time="0"/><testcase classname="Firefox 133.0" name="lodash it is available" time="0"/><testcase classname="Firefox 133.0" name="String parse nothing String(undefined) returns 'undefined'" time="0"/><testcase classname="Firefox 133.0" name="String parse nothing String(undefined) is typeof string" time="0"/><testcase classname="Firefox 133.0" name="String parse nothing String(null) returns 'undefined'" time="0"/><testcase classname="Firefox 133.0" name="String parse nothing String(null) is typeof string" time="0"/><testcase classname="Firefox 133.0" name="String parse Object String({}) String({}) returns '[object Object]' string" time="0"/><testcase classname="Firefox 133.0" name="String parse Object String({}) String({}) is typeof string" time="0"/><testcase classname="Firefox 133.0" name="String parse Object String({}) {} + '' returns '[object Object]' string" time="0"/><testcase classname="Firefox 133.0" name="String parse Object String({}) {} + '' is typeof string" time="0"/><testcase classname="Firefox 133.0" name="String parse Object String({}) '' + {} returns '[object Object]' string" time="0"/><testcase classname="Firefox 133.0" name="String parse Object String({}) '' + {} is typeof string" time="0"/><testcase classname="Firefox 133.0" name="String parse Object Array String([]) String([]) returns ''" time="0"/><testcase classname="Firefox 133.0" name="String parse Object Array String([]) String([]) is typeof string" time="0"/><testcase classname="Firefox 133.0" name="String parse Object Array String([]) String([undefined]) returns ''" time="0"/><testcase classname="Firefox 133.0" name="String parse Object Array String([]) String([undefined]) is typeof string" time="0"/><testcase classname="Firefox 133.0" name="String parse Object Array String([]) String([null]) returns ''" time="0"/><testcase classname="Firefox 133.0" name="String parse Object Array String([]) String([null]) is typeof string" time="0"/><testcase classname="Firefox 133.0" name="String parse Object Array String([]) [] + '' returns ''" time="0"/><testcase classname="Firefox 133.0" name="String parse Object Array String([]) [] + '' is typeof string" time="0"/><testcase classname="Firefox 133.0" name="String parse Object Array String([]) '' + [] returns ''" time="0"/><testcase classname="Firefox 133.0" name="String parse Object Array String([]) '' + [] is typeof string" time="0"/><testcase classname="Firefox 133.0" name="String parse Object Array new String([]) new String([]) is typeof 'object', not 'string'" time="0"/><testcase classname="Firefox 133.0" name="String parse Object Array new String([]) new String([]) is instanceof String" time="0"/><testcase classname="Firefox 133.0" name="String parse Object Array new String([]) new String([]) is instanceof Object" time="0"/><testcase classname="Firefox 133.0" name="String parse Object Array new String([]) new String([]) .toString() returns ''" time="0"/><testcase classname="Firefox 133.0" name="String parse Object Array new String([]) new String([undefined]) is typeof 'object', not 'string'" time="0"/><testcase classname="Firefox 133.0" name="String parse Object Array new String([]) new String([undefined]) is instanceof String" time="0"/><testcase classname="Firefox 133.0" name="String parse Object Array new String([]) new String([undefined]) is instanceof Object" time="0"/><testcase classname="Firefox 133.0" name="String parse Object Array new String([]) new String([undefined]) .toString() returns ''" time="0"/><testcase classname="Firefox 133.0" name="String parse Object Array new String([]) new String([null]) is typeof 'object', not 'string'" time="0"/><testcase classname="Firefox 133.0" name="String parse Object Array new String([]) new String([null]) is instanceof String" time="0"/><testcase classname="Firefox 133.0" name="String parse Object Array new String([]) new String([null]) is instanceof Object" time="0"/><testcase classname="Firefox 133.0" name="String parse Object Array new String([]) new String([null]) .toString() returns ''" time="0"/><testcase classname="Firefox 133.0" name="String parse Object Array String([,,]) String([,,]) returns ','" time="0"/><testcase classname="Firefox 133.0" name="String parse Object Array String([,,]) String([,,]) is typeof string" time="0"/><testcase classname="Firefox 133.0" name="String parse Object Array String([,,]) String([undefined,undefined,]) returns ','" time="0"/><testcase classname="Firefox 133.0" name="String parse Object Array String([,,]) String([undefined,undefined,]) is typeof string" time="0"/><testcase classname="Firefox 133.0" name="String parse Object Array String([,,]) String([null,null,]) returns ','" time="0"/><testcase classname="Firefox 133.0" name="String parse Object Array String([,,]) String([null,null,]) is typeof string" time="0"/><testcase classname="Firefox 133.0" name="switch case order magicNumber 10 returns 2" time="0"/><testcase classname="Firefox 133.0" name="switch case order magicNumber 20 returns 2" time="0"/><testcase classname="Firefox 133.0" name="switch case order magicNumber 30 returns 4" time="0"/><testcase classname="Firefox 133.0" name="switch case order magicNumber 42 returns 3" time="0"/><testcase classname="Firefox 133.0" name="Symbol to string Symbol('that is cool') convert String(oSymbol) can be converted Symbol('that is cool')" time="0"/><testcase classname="Firefox 133.0" name="Symbol to string Symbol('that is cool') convert oSymbol.toString() can be converted Symbol('that is cool')" time="0"/><testcase classname="Firefox 133.0" name="Symbol to string Symbol('that is cool') cast oSymbol + '' throws a TypeError" time="0"/><testcase classname="Firefox 133.0" name="Symbol to string Symbol('that is cool') cast oSymbol + '' error message Common throws a TypeError: message" time="0"/><testcase classname="Firefox 133.0" name="Symbol to string Symbol('that is cool') cast oSymbol + '' error message Safari throws a TypeError: message" time="0"/><testcase classname="Firefox 133.0" name="Symbol to string Symbol('that is cool') cast '' + oSymbol throws a TypeError" time="0"/><testcase classname="Firefox 133.0" name="Symbol to string Symbol('that is cool') cast '' + oSymbol error message Common throws a TypeError: message" time="0"/><testcase classname="Firefox 133.0" name="Symbol to string Symbol('that is cool') cast '' + oSymbol error message Safari throws a TypeError: message" time="0"/><testcase classname="Firefox 133.0" name="try { something } finally { return x } always runs last" time="0"/></testsuite>
